name: Cross-platform Release

on:
  push:
    tags:
      - 'v*.*.*'
env:
  JAVA_VERSION: '21'

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      - run: chmod +x ./gradlew
      - run: ./gradlew packageDist -PtargetOs=linux_x64
      - name: Upload DEB (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb
          path: build/compose/binaries/main/deb/*.deb

  build-windows:
    runs-on: windows-2025
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      - run: .\gradlew.bat packageDist -PtargetOs=windows_x64
      - name: Upload MSI (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: windows-msi
          path: build/compose/binaries/main/msi/*.msi

  build-macos:
    runs-on: macos-13 # non-ARM
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      - run: chmod +x ./gradlew
      - run: ./gradlew packageDist -PtargetOs=macos_64
      - name: Upload DMG (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: build/compose/binaries/main/dmg/*.dmg

  build-macos-arm64:
    runs-on: macos-13-xlarge # ARM
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      - run: chmod +x ./gradlew
      - run: ./gradlew packageDist -PtargetOs=macos_arm64
      - name: Upload DMG (macOS ARM)
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: build/compose/binaries/main/dmg/*.dmg

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]

    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Extract changelog for current tag
        id: changelog
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "Getting changelog for version: $TAG_VERSION"

          body=$(awk -v ver="$TAG_VERSION" '
            $0 ~ "^# Release "ver {
              print_line=1
              next
            }
            print_line && $0 ~ "^# Release " {
              exit
            }
            print_line { print }
          ' CHANGELOG.md)

          if [ -z "$body" ]; then
            body="No description"
          fi

          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$body" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Display downloaded structure
        run: tree dist || dir dist

      - name: Create Release with all artifacts
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.body }}
          files: dist/**/*
          draft: false
          prerelease: false
          make_latest: 'true'

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
